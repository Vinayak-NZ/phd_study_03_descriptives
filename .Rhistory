panel.background = element_blank(), axis.line = element_line(colour = "black"),
plot.title = element_text(color = "#2F2E41", size = 12, face = "bold"),
plot.subtitle = element_text(color = "#454543"),
plot.caption = element_text(color = "#454543", face = "italic"),
legend.key = element_rect(fill = NA),
legend.key.width = unit(0, "pt"),
legend.spacing.x = unit(0, "pt"))
ggplot(tb_retain,
aes(reorder(name_labels,
name_labels,
function(x)-length(x)))) +
geom_bar(fill = "#4739a2") +
scale_x_discrete(drop=FALSE) +
ylim(0, 50) +
labs(title = paste0("Adapting TeamBaby"),
subtitle = "Bar chart of elements of TeamBaby to retain",
caption = "Data source: COT project") +
xlab("TeamBaby feature") +
ylab("Frequency of codes") +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_line(colour = "black"),
plot.title = element_text(color = "#2F2E41", size = 12, face = "bold"),
plot.subtitle = element_text(color = "#454543"),
plot.caption = element_text(color = "#454543", face = "italic"),
legend.key = element_rect(fill = NA),
legend.key.width = unit(0, "pt"),
legend.spacing.x = unit(0, "pt"))
ggplot(tb_retain,
aes(reorder(name_labels,
name_labels,
function(x)-length(x)))) +
geom_bar(fill = "#4739a2") +
scale_x_discrete(drop=FALSE) +
ylim(0, 20) +
labs(title = paste0("Adapting TeamBaby"),
subtitle = "Bar chart of elements of TeamBaby to retain",
caption = "Data source: COT project") +
xlab("TeamBaby feature") +
ylab("Frequency of codes") +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_line(colour = "black"),
plot.title = element_text(color = "#2F2E41", size = 12, face = "bold"),
plot.subtitle = element_text(color = "#454543"),
plot.caption = element_text(color = "#454543", face = "italic"),
legend.key = element_rect(fill = NA),
legend.key.width = unit(0, "pt"),
legend.spacing.x = unit(0, "pt"))
# teambaby-modify
tb_modify <- codes_sources[[14]]
tb_modify$name_labels <-
ifelse(tb_modify$name == "MTO", "Other",
ifelse(tb_modify$name == "Functionality M",
"Functionality",
ifelse(tb_modify$name == "Content M",
"Content",
ifelse(tb_modify$name == "Design M",
"Design",
ifelse(tb_modify$name == "Handling data M",
"Data", "Web-app")))))
tb_modify$name_labels = factor(tb_modify$name_labels,
levels = c("Functionality",
"Content",
"Design",
"Data",
"Web-app",
"Other"))
ggplot(tb_modify,
aes(reorder(name_labels,
name_labels,
function(x)-length(x)))) +
geom_bar(fill = "#4739a2") +
scale_x_discrete(drop=FALSE) +
ylim(0, 20) +
labs(title = paste0("Adapting TeamBaby"),
subtitle = "Bar chart of elements of TeamBaby to retain",
caption = "Data source: COT project") +
xlab("TeamBaby feature") +
ylab("Frequency of codes") +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_line(colour = "black"),
plot.title = element_text(color = "#2F2E41", size = 12, face = "bold"),
plot.subtitle = element_text(color = "#454543"),
plot.caption = element_text(color = "#454543", face = "italic"),
legend.key = element_rect(fill = NA),
legend.key.width = unit(0, "pt"),
legend.spacing.x = unit(0, "pt"))
ggplot(tb_modify,
aes(reorder(name_labels,
name_labels,
function(x)-length(x)))) +
geom_bar(fill = "#4739a2") +
scale_x_discrete(drop=FALSE) +
ylim(0, 50) +
labs(title = paste0("Adapting TeamBaby"),
subtitle = "Bar chart of elements of TeamBaby to retain",
caption = "Data source: COT project") +
xlab("TeamBaby feature") +
ylab("Frequency of codes") +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_line(colour = "black"),
plot.title = element_text(color = "#2F2E41", size = 12, face = "bold"),
plot.subtitle = element_text(color = "#454543"),
plot.caption = element_text(color = "#454543", face = "italic"),
legend.key = element_rect(fill = NA),
legend.key.width = unit(0, "pt"),
legend.spacing.x = unit(0, "pt"))
=======
plot.caption = element_text(color = "#454543", face = "italic")
)
>>>>>>> 415ac530e0644c458ae29986622dae7cdd474618
source("R/00_load_package.R")
source("R/01_load_data.R")
source("R/00_load_package.R")
source("R/01_load_data.R")
source("R/02_data_edit.R")
source("R/02_format_codes.R")
source("R/03_data_extracts.R")
source("R/04_aggregate_data.R")
source("R/00_load_functions.R")
source("R/00_load_package.R")
source("R/01_load_data.R")
source("R/02_data_edit.R")
source("R/02_format_codes.R")
source("R/03_data_extracts.R")
source("R/04_aggregate_data.R")
source("R/05_visualise_communication_survey.R")
source("R/05_visualise_demographics.R")
source("R/05_visualise_health_conditions.R")
source("R/05_visualise_regions.R")
source("R/05_visualise_waiting_room.R")
source("R/06_flowchart_workshops.R")
## ---- visualise-codes
source("R/05_visualise_codes_digital_tool.R")
source("R/05_visualise_codes_needs.R")
source("R/05_visualise_codes_preparation.R")
source("R/05_visualise_codes_teambaby.R")
source("R/05_visualise_codes_waiting_room_experiences.R")
# preparation-location
preparation_location <- codes_sources[[5]]
preparation_location$name_labels = factor(preparation_location$name,
levels = c("At home",
"On the way",
"In the clinic",
"Other"))
plot_prep_location <-
ggplot(preparation_location,
aes(reorder(name_labels,
name_labels,
function(x)-length(x)))) +
geom_bar(fill = "#4739a2") +
scale_x_discrete(drop=FALSE) +
ylim(0, 20) +
labs(title = paste0("Preparation to see the doctor"),
subtitle = "Bar chart of where people prepare",
caption = "Data source: Patient preparedness tool") +
xlab("Preparation location") +
ylab("Frequency of codes") +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_line(colour = "black"),
plot.title = element_text(color = "#2F2E41", size = 12, face = "bold"),
plot.subtitle = element_text(color = "#454543"),
plot.caption = element_text(color = "#454543", face = "italic"),
legend.key = element_rect(fill = NA),
legend.key.width = unit(0, "pt"),
legend.spacing.x = unit(0, "pt"))
ggsave("output/plot_prep_location.png",
plot = plot_prep_location)
source("R/00_load_functions.R")
source("R/00_load_package.R")
source("R/01_load_data.R")
source("R/02_data_edit.R")
source("R/02_format_codes.R")
source("R/03_data_extracts.R")
source("R/04_aggregate_data.R")
source("R/05_visualise_regions.R")
source("R/05_visualise_regions.R")
source("R/01_load_data.R")
View(demographics)
View(needs_complaints)
View(communication_exp)
View(retaining_teambaby)
View(health_related_information)
View(waiting_room_exp)
code_frequencies <- read.csv("input/code_frequencies.csv", sep = "\t")
View(code_frequencies)
code_frequencies <- read.csv("input/code_frequencies.csv", sep = ";")
View(code_frequencies)
code_frequencies <- read.csv("input/code_frequencies.csv", sep = ",")
View(code_frequencies)
code_frequencies <- code_frequencies[!(code_frequencies$code_tree == code_frequencies$parent_name), ]
View(code_frequencies)
# assumptions about responsibility
cf_assumptions_responsibility <-
code_frequencies[code_frequencies$parent_name == "Assumptions about responsibility", ]
View(cf_assumptions_responsibility)
code_frequencies <- read.csv("input/code_frequencies.csv", sep = ",")
# remove-parent-frequencies
code_frequencies <-
code_frequencies[!(code_frequencies$code_tree == code_frequencies$parent_name), ]
# subset-text-extracts
frequency_parent_codes <-
list("Needs and complaints",
"System challenges",
"Assumptions about responsibility",
"Preparation timing",
"Preparation location",
"Preparation method",
"Preparation reason",
"Preparation assistance",
"Emotions whilst waiting for the doctor",
"Thoughts whilst waiting for the doctor",
"Needs for a digital tool",
"Feature inclusion",
"Feature exclusion",
"Retaining TeamBaby",
"Modifying TeamBaby",
"Utility of tool")
text_codes_sub <- lapply(frequency_parent_codes,
subset_code_frequencies,
code_frequencies)
# subset-qualcoder-code-frequencies
subset_code_frequencies <- function(data, parent_id){
subset_data <- data[data$parent_name == parent_id, ]
output(parent_id)
}
text_codes_sub <- lapply(frequency_parent_codes,
subset_code_frequencies,
code_frequencies)
# subset-qualcoder-code-frequencies
subset_code_frequencies <- function(parent_id, data){
subset_data <- data[data$parent_name == parent_id, ]
output(parent_id)
}
text_codes_sub <- lapply(frequency_parent_codes,
subset_code_frequencies,
code_frequencies)
# subset-qualcoder-code-frequencies
subset_code_frequencies <- function(parent_id, data){
subset_data <- data[data$parent_name == parent_id, ]
return(subset_data)
}
text_codes_sub <- lapply(frequency_parent_codes,
subset_code_frequencies,
code_frequencies)
View(text_codes_sub)
View(text_codes_sub[[1]])
validate_needs <- read.csv("input/validation_needs.csv")
validate_needs <- read.csv("input/validation_needs.csv")
validate_needs <- read.csv("input/validate_needs.csv")
View(validate_needs)
validate_needs_include <-
validate_needs[validate_needs[["original_sample"]] == 0, ]
validate_needs_exclude <-
validate_needs_include[!validate_needs_include[["id"]] %in% c("CV09", "CV11"), ]
validate_q_method <-
validate_needs_exclude[, c("id", "qm_1", "qm_2", "qm_3", "qm_4", "qm_5", "qm_6", "qm_7")]
View(validate_q_method)
source("R/00_load_functions.R")
source("R/00_load_package.R")
test <- melt(validate_q_method,
id.vars = c("id"),
measure.vars = c("qm_1", "qm_2", "qm_3", "qm_4", "qm_5", "qm_6", "qm_7"))
setDT(validate_q_method)
test <- melt(validate_q_method,
id.vars = c("id"),
measure.vars = c("qm_1", "qm_2", "qm_3", "qm_4", "qm_5", "qm_6", "qm_7"))
View(test)
test2 <- test[, c("id", "qm_1")]
test2 <- test[test[["variable"]] == "qm_1", ]
View(test2)
c_vars <- c("C01", "C02")
for (i in c_vars) {
print(i)
}
c_vars <- c("C01", "C02", "C03", "C04", "C05", "C06", "C07", "C08", "C09", "C10",
"C11", "C12", "C13", "C14")
for (i in c_vars) {
test2[i] <- ifelse(test2[["value"]] == i, -3, 0)
}
for (i in c_vars) {
test2[[i]] <- ifelse(test2[["value"]] == i, -3, 0)
}
View(test2)
for (i in 1:7) {
test_all[i] <- test[test[["variable"]] == paste0("qm_", i), ]
for (j in c_vars){
test_all[i][[j]] <- ifelse(test2[["value"]] == j, -3, 0)
}
}
test_all <- list()
for (i in 1:7) {
test_all[i] <- test[test[["variable"]] == paste0("qm_", i), ]
for (j in c_vars){
test_all[i][[j]] <- ifelse(test2[["value"]] == j, -3, 0)
}
}
warnings()
paste0("qm_", i)
View(test_all)
test_all[[1]]
test_all[[1]]
test_all <- list()
for (i in 1:7) {
test_all[i] <- test[test[["variable"]] == paste0("qm_", i), ]
}
View(test_all)
test2 <- test[test[["variable"]] == "qm_1", ]
test2 <- test[test[["variable"]] == paste0("qm_", i), ]
test_all <- list()
for (i in 1:7) {
test_all[[i]] <- test[test[["variable"]] == paste0("qm_", i), ]
}
test_all[[1]]
test_all[[2]]
test_all <- list()
for (i in 1:7) {
test_all[[i]] <- test[test[["variable"]] == paste0("qm_", i), ]
for (j in c_vars){
test_all[[i]][[j]] <- ifelse(test2[["value"]] == j, -3, 0)
}
}
test_all[[1]]
test3 <- ldply(test_all, data.frame)
test3 <- bind_rows(test_all, .id = "id")
test3 <- do.call(rbind, test_all)
View(test3)
qm_replace <- c(-3, -2, -1, 0, 1, 2, 3)
qm_replace[1]
qm_replace[2]
qm_replace[7]
c_vars <- c("C01", "C02", "C03", "C04", "C05", "C06", "C07", "C08", "C09", "C10",
"C11", "C12", "C13", "C14")
qm_replace <- c(-3, -2, -1, 0, 1, 2, 3)
test_all <- list()
for (i in 1:7) {
test_all[[i]] <- test[test[["variable"]] == paste0("qm_", i), ]
for (j in c_vars){
q_val <- qm_replace[i]
test_all[[i]][[j]] <- ifelse(test2[["value"]] == q_val, -3, 0)
}
}
test3 <- do.call(rbind, test_all)
View(test3)
test_all <- list()
for (i in 1:7) {
test_all[[i]] <- test[test[["variable"]] == paste0("qm_", i), ]
for (j in c_vars){
q_val <- qm_replace[i]
test_all[[i]][[j]] <- ifelse(test2[["value"]] == j, q_val, 0)
}
}
test3 <- do.call(rbind, test_all)
View(test3)
test_all <- list()
for (i in 1:7) {
test_all[[i]] <- test[test[["variable"]] == paste0("qm_", i), ]
for (j in c_vars){
q_val <- qm_replace[i]
test_all[[i]][[j]] <- ifelse(test2[["value"]] == j, q_val, NA)
}
}
test3 <- do.call(rbind, test_all)
View(test3)
test_all <- list()
for (i in 1:7) {
test_all[[i]] <- test[test[["variable"]] == paste0("qm_", i), ]
for (j in c_vars){
q_val <- qm_replace[i]
test_all[[i]][[j]] <- ifelse(grepl(j, test_all[[i]][["value"]]), q_val, NA)
}
}
test3 <- do.call(rbind, test_all)
View(test3)
test4 <- test3[test3[["id"]] == "CV01", ]
View(test4)
library(dplyr)
install.packages("dplyr")
library(dplyr)
test3 %>%
summarise(across(everything(), ~ na.omit(.x)))
test4 %>%
summarise(across(everything(), ~ na.omit(.x)))
test4 <- test3[grepl(j, "CV01"), ]
test4 <- test3[grepl("CV01", test3[["value"]]), ]
View(test3)
test4 <- test3[grepl("C01", test3[["value"]]), ]
View(test4)
test4 <- test3[grepl("C01", test3[["value"]]), c("id", "C01")]
View(test4)
test3_all <- list()
for (i in c_vars){
test3_all[[i]] <-
test3[grepl(i, test3[["value"]]), c("id", i)]
}
test3_all[[1]]
test3_all[[2]]
View(test3_all)
test3_all <- list()
for (i in 1:14){
test3_all[[i]] <-
test3[grepl(c_vars[i], test3[["value"]]), c("id", c_vars[i])]
}
test3_all[[1]]
View(test3)
View(test3_all)
c_vars[1]
View(test4)
test4 <- test3[grepl(c_vars[i], test3[["value"]]), c("id", c_vars[i])]
test4 <- test3[grepl("C01", test3[["value"]]), c("id", "C01")]
test4 <- test3[grepl(c_vars[i], test3[["value"]]), c("id", "C01")]
test4 <- test3[grepl(c_vars[i], test3[["value"]]), c("id", c_vars[1])]
test4 <- test3[grepl(c_vars[i], test3[["value"]]), c("id", c_vars[2])]
c_vars[1]
c_vars[[1]]
c_vars[[2]]
test3_all <- list()
for (i in 1:14){
var <- c_vars[i]
test3_all[[i]] <-
test3[grepl(c_vars[i], test3[["value"]]), c("id", var)]
}
View(validate_needs)
View(test3_all)
test3_all[[2]]
test4 <- test3[grepl(c_vars[i], test3[["value"]]), c("id", "C01")]
View(test4)
test4 <- test3[grepl(c_vars[1], test3[["value"]]), c("id", c_vars[1])]
c_vars[1]
test3$C01
test3[[c_vars[1]]]
test4 <- test3[grepl(c_vars[1], test3[["value"]]), [["id", c_vars[1]]]]
c_vars[1]
test4 <- test3[grepl(c_vars[1], test3[["value"]]), c("id", c_vars[1])]
print(c_vars[1])
test4
test3[, c("id", c_vars[1])]
test3[, c("id", "C01")]
names(test3)
names(test3) <- trimws(names(test3))
names(test3)
test3[, c("id", c_vars[1])]
test3 <- as.data.frame(test3)
test4 <- test3[grepl(c_vars[1], test3[["value"]]), c("id", c_vars[1])]
View(test4)
test3_all <- list()
for (i in 1:14){
test3 <- as.data.frame(test3)
test3_all[[i]] <-
test3[grepl(c_vars[i], test3[["value"]]), c("id", c_vars[i])]
}
test3_all[[1]]
test3_all[[7]]
test3_all[[14]]
test4 <- do.call(cbind, test3_all)
test4 <-
Reduce(function(x, y) merge(x, y, all = TRUE, by = "id"), test3_all)
View(test4)
install.packages("qmethod")
library(qmethod)
# Run the full model with max factors
result_all <- qmethod(test4, nfactors = 14)
test3 <- do.call(rbind, test_all)
test3 <- as.data.frame(test3)
test3_all <- list()
for (i in 1:14){
test3_all[[i]] <-
test3[grepl(c_vars[i], test3[["value"]]), c("id", c_vars[i])]
}
test4 <-
Reduce(function(x, y) merge(x, y, all = TRUE, by = "id"), test3_all)
View(test4)
# Run the full model with max factors
test4[is.na(test4)] <- -1
test4 <- test4[!duplicated(test4$id), ]
result_all <- qmethod(test4, nfactors = 14)
View(test4)
test5 <- test4[, !"id"]
test5 <- test4[, !c("id")]
test5 <- test4[, !(names(test4)=="id")]
result_all <- qmethod(test5, nfactors = 14)
test5 <- test5[test5[["id"]] == "C05", ]
result_all <- qmethod(test5, nfactors = 14)
# Run the full model with max factors
test4[is.na(test4)] <- -1
test4 <- test4[!duplicated(test4$id), ]
test5 <- test4[, !(names(test4)=="id")]
View(test5)
# Run the full model with max factors
test4[is.na(test4)] <- -1
test4 <- test4[!duplicated(test4$id), ]
test5 <- test4[!(test4[["id"]] == "C05"), ]
test5 <- test4[, !(names(test4)=="id")]
View(test5)
# Run the full model with max factors
test4[is.na(test4)] <- -1
test4 <- test4[!duplicated(test4$id), ]
test5 <- test4[!(test4[["id"]] == "C05"), ]
View(test5)
# Run the full model with max factors
test4[is.na(test4)] <- -1
test4 <- test4[!duplicated(test4$id), ]
test5 <- test4[test4[["id"]] != "C05", ]
test5 <- test4[test4[["id"]] != "CV05", ]
test5 <- test4[, !(names(test4)=="id")]
result_all <- qmethod(test5, nfactors = 14)
result_all <- qmethod(test5, nfactors = 14, forced = FALSE)
# Run the full model with max factors
test4[is.na(test4)] <- -1
test4 <- test4[!duplicated(test4$id), ]
test5 <- test4[!(test4[["id"]] %in% c("CV03", "CV05")), ]
test5 <- test4[, !(names(test4)=="id")]
result_all <- qmethod(test5, nfactors = 14)
